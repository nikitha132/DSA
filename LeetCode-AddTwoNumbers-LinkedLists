# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry = 0
        dummy_head = ListNode()
        current = dummy_head

        while l1 or l2:
            x = l1.val if l1 else 0
            y = l2.val if l2 else 0
            _sum = carry + x + y
            carry = _sum // 10
            current.next = ListNode(_sum % 10)
            current = current.next

            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next

        if carry > 0:
            current.next = ListNode(carry)

        return dummy_head.next
    

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode dummyHead=new ListNode();
        ListNode result=dummyHead;
        while(l1!=null || l2!=null){           
            int x=(l1!=null)?l1.val:0; //if l1 length is greater
            int y=(l2!=null)?l2.val:0; //if l2 length is greater
            int sum=carry+x+y;    
            result.next=new ListNode(sum%10);  //remainder in the result
            result=result.next;
            carry=sum/10;  //rest(quotient) is carried
            if (l1!=null){l1=l1.next;}
            if(l2!=null){l2=l2.next;}
        }

        if(carry>0){//if there's extra carry append it to result
          result.next=new ListNode(carry);
        }
        return dummyHead.next;
    }
}