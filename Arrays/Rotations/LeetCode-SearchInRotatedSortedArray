class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left,right=0,len(nums)-1
        while(left<=right):
            mid=(left+right)//2
            if nums[mid]==target:
                return mid
            if nums[left]<=nums[mid]:
                if nums[left] <= target <=nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            elif nums[mid] <= target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
        return -1
    
##JAVA

class Solution {
    public int search(int[] nums, int target) {
        int left=0;
        int right=nums.length-1;
        int mid;
        while(left<=right){
            mid=(left+right)/2;
            if (nums[mid]==target){
                return mid;
            }
            if(nums[left]<=nums[mid]){ //left sorted
                if (nums[left]<=target && target<nums[mid]){ // check if it exists in the sorted left
                    right=mid-1;
                }
                else{ //it exists on the unsorted right
                    left=mid+1;
                }
            }
            else if(nums[mid]<target && target<=nums[right]) { //right sorted , check if it exists in the right sorted
                left=mid+1;
            }
            else{ //exists in the unsorted left
                right=mid-1;
            }
        }
        return -1;
        
    }
}