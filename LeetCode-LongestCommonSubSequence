#without dp only recursion
def lcs(s1,s2,m,n,dp):
            if m==0 or n==0:
                return 0
            if(dp[m][n] != -1):
                return dp[m][n]
            if(s1[m - 1] == s2[n - 1]):
                dp[m][n] = 1 + lcs(s1, s2, m - 1, n - 1, dp)
            else:
                dp[m][n] = max(lcs(s1, s2, m, n - 1, dp), lcs(s1, s2, m - 1, n, dp))
            return dp[m][n]
        m=len(text1)+1
        n=len(text2)+1
        dp=[[-1 for _ in range(n)]for _ in range(m)] 
        return lcs(text1,text2,m-1,n-1,dp)