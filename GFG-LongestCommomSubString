#without dp only recursion
def longestCommonSubstr(self, S1, S2, n, m):
        # code here
        def lcs(s1,s2,m,n,count):
            if m==0 or n==0:
                return count
            if(s1[m - 1] == s2[n - 1]):
                count=lcs(s1, s2, m - 1, n - 1, count+1)
            else:
                count=max(count,max(lcs(s1, s2, m, n - 1, 0), lcs(s1, s2, m - 1, n, 0)))
            return count
        m=len(S1)+1
        n=len(S2)+1
        return lcs(S1,S2,m-1,n-1,0)


#with dp and recursion
memo = [[-1] * (m + 1) for _ in range(n + 1)]

def lcs(s1, s2, m, n, count):
        if m == 0 or n == 0:
            return count
        if memo[n][m] != -1:
            return memo[n][m]

        if s1[m - 1] == s2[n - 1]:
            count = lcs(s1, s2, m - 1, n - 1, count + 1)
        else:
            count = max(count, max(lcs(s1, s2, m, n - 1, 0), lcs(s1, s2, m - 1, n, 0)))

        memo[n][m] = count  # Memoize the result
        return count

print(lcs(S1, S2, m, n, 0))