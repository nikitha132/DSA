#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'kruskals' function below.
#
# The function is expected to return an INTEGER.
# The function accepts WEIGHTED_INTEGER_GRAPH g as parameter.
#

#
# For the weighted graph, <name>:
#
# 1. The number of nodes is <name>_nodes.
# 2. The number of edges is <name>_edges.
# 3. An edge exists between <name>_from[i] and <name>_to[i]. The weight of the edge is <name>_weight[i].
#
#

def kruskals(g_nodes, g_from, g_to, g_weight):
    # Write your code here
    def find(parent,node):
        if parent[node]==node:
            return node
        return find(parent,parent[node])
        
    def union(x_root,y_root,parent,rank):
        # x_root=find(parent,x)
        # y_root=find(parent,y)
        if rank[x_root] >rank[y_root]:
            parent[y_root]=x_root
        elif rank[x_root]<rank[y_root]:
            parent[x_root]=y_root
        else:
            parent[x_root]=y_root
            rank[y_root]+=1
    graph=[]
    total_weight=0
    for u,v,w in zip(g_from,g_to,g_weight):
        graph.append([u,v,w])
    graph=sorted(graph,key=lambda x:x[2])
    parent=[ v for v in range(g_nodes+1)]
    rank=[0]*(g_nodes+1)
    i=connected_edges=0
    while connected_edges <g_nodes-1:
        u,v,w=graph[i]
        u_root=find(parent,u)
        v_root=find(parent,v)
        if u_root!=v_root:
            connected_edges+=1
            total_weight+=w
            union(u_root,v_root,parent,rank)
        i+=1
    return total_weight
    
    
    
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    g_nodes, g_edges = map(int, input().rstrip().split())

    g_from = [0] * g_edges
    g_to = [0] * g_edges
    g_weight = [0] * g_edges

    for i in range(g_edges):
        g_from[i], g_to[i], g_weight[i] = map(int, input().rstrip().split())

    res = kruskals(g_nodes, g_from, g_to, g_weight)

    # Write your code here.
    fptr.write(str(res))

    fptr.close()
