class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
        
class Solution:
    def fractionalknapsack(self,W, items,n):
 
       #taking variable for current weight in knapsack.
        curr_weight = 0
        curr_value = 0  
    
        #sorting items on basis of value/weight ratio.
        items = sorted(items, key = lambda x: (x.value/x.weight), reverse= True)
        n=len(items)
        #iterating over all the items.
        for i in range(n):
            
            #if currweight + itemâ€™s weight is less than or equal to W,
            #then we add the item's value to final value.
            if curr_weight+items[i].weight <= W: 
                curr_weight += items[i].weight
                curr_value += items[i].value
                
            #else we take the fraction of the that item's value 
            #based on the remaining weight in knapsack.
            else:
                accomodate = W-curr_weight 
                value_added = items[i].value *(accomodate/items[i].weight)
                curr_value += value_added
                break 
            
        #returning final value.
        return curr_value