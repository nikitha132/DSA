class TrieNode:
    def __init__(self):
        self.children = {}
        
class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, num):
        node = self.root
        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            if bit not in node.children:
                node.children[bit] = TrieNode()
            node = node.children[bit]


    def find_max_xor(self, num):
        node = self.root
        result = 0
        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            flip_bit = 1 - bit
            if flip_bit in node.children:
                result |= (1 << i)
                node = node.children[flip_bit]
            else:
                node = node.children[bit]
        return result
class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
      trie = Trie()

      for num in nums:
          trie.insert(num)
  
      max_xor = float('-inf')
      for num in nums:
          max_xor = max(max_xor, trie.find_max_xor(num))
  
      return max_xor
      

        