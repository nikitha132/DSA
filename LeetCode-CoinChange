#with recursion
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        def min_coins(coins,n,Sum):
            if Sum == 0:
                return 0
            if n == 0:
                return float('inf')
            if coins[n - 1] > Sum:
                return min_coins(coins, n - 1, Sum)
            
            ans1 = min_coins(coins, n - 1, Sum)
            ans2 = min_coins(coins, n, Sum - coins[n - 1]) + 1
            
            return min(ans1, ans2)
        result=min_coins(coins,len(coins),amount)
        if result!= float('inf'):
            return result
        else:
            return -1

#with memoization and recursion
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        def min_coins(coins,n,Sum,memo):
            if Sum == 0:
                return 0
            if n == 0:
                return float('inf')
            if memo[n][Sum] != -1:
                return memo[n][Sum]
            if coins[n - 1] > Sum:
                memo[n][Sum]=min_coins(coins, n - 1, Sum,memo)
            else:
                ans1 = min_coins(coins, n - 1, Sum,memo)
                ans2 = min_coins(coins, n, Sum - coins[n - 1],memo) + 1
                memo[n][Sum]=min(ans1, ans2)
            return memo[n][Sum]
        memo = [[-1 for _ in range(amount + 1)] for _ in range(len(coins) + 1)]
        result=min_coins(coins,len(coins),amount,memo)
        if result!= float('inf'):
            return result
        else:
            return -1
#optimized with dp
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0 
        for i in range(1, amount + 1):
            for coin in coins:
                if i >= coin:
                    dp[i] = min(dp[i], dp[i - coin] + 1)

        return dp[amount] if dp[amount] != float('inf') else -1