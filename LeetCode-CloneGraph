"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        def dfs(node,visited):
            if node in visited:
                return visited[node]
            new_node=Node(node.val)
            visited[node]=new_node
            for v in node.neighbors: 
                new_node.neighbors.append(dfs(v,visited))
            return new_node
        if not node:
            return 
        new_graph= dfs(node,{})
        return new_graph
