class Solution:
    def largestHistRow(self,heights):
        res=max(heights)
        stack=[]
        for i in range(len(heights)):
            while stack and heights[stack[-1]]>=heights[i]:
                top_index=stack.pop()
                if stack:
                    curr=i-stack[-1]-1
                else:
                    curr=i
                res=max(res,heights[top_index]*curr)
            stack.append(i)
        while stack:
            top_index=stack.pop()
            if stack:
                res=max((len(heights)-stack[-1]-1)*heights[top_index],res)
            else:
                res=max(len(heights)*heights[top_index],res)
        return res

    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        matrix = [[int(cell) for cell in row] for row in matrix]
        result = self.largestHistRow(matrix[0])
        for i in range(1, len(matrix)):
            for j in range(len(matrix[i])):
                if matrix[i][j]:
                    matrix[i][j] += matrix[i - 1][j]
            result = max(result, self.largestHistRow(matrix[i]))

        return result
            