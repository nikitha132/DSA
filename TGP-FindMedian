'''
Given that n integers are read from a data stream. Your task is to find the median of the elements read so far. Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the floor of the average of the two middle values.

Example 1
Input
arr = [5,3,8]
Output
[5,4,5]
Explanation
After reading first element of stream, Median of [5] is 5 After reading second element of stream, Median of [5, 3] = floor((5+3)/2)=4 After reading third element of stream, Median of [5,3,8] = 5 ,it is the middle value of the sorted array So the output will be 5 4 5.

Example 2:
Input:
arr = [1,2,3] 
Output:
[1,1,2]
'''
import heapq

class MedianFinder:
    def __init__(self):
        # Initialize two heaps
        self.min_heap = []  # Min-heap for the larger half of the elements
        self.max_heap = []  # Max-heap for the smaller half of the elements

    def addNum(self, num: int) -> None:
        # Add the number to one of the heaps
        if not self.max_heap or num <= -self.max_heap[0]:
            heapq.heappush(self.max_heap, -num)  # Use negative to simulate a max-heap
        else:
            heapq.heappush(self.min_heap, num)

        # Balance the heaps if needed to maintain the property that the heaps have equal size or the max-heap has one more element
        while len(self.max_heap) > len(self.min_heap) + 1:
            num = -heapq.heappop(self.max_heap)
            heapq.heappush(self.min_heap, num)
        while len(self.min_heap) > len(self.max_heap):
            num = heapq.heappop(self.min_heap)
            heapq.heappush(self.max_heap, -num)

    def findMedian(self,arr) -> list:
        result=[]
        for ele in arr:
            self.addNum(ele)
            # If the heaps have the same size, calculate the average of the top elements and return it as an integer
            if len(self.max_heap) == len(self.min_heap):
                result.append((-self.max_heap[0] + self.min_heap[0]) // 2)
            else:
                # Otherwise, the median is the top element of the max-heap
                result.append( -self.max_heap[0])

arr = [5, 3, 8]
median_finder = MedianFinder()
result = []
print(median_finder.findMedian(arr))
