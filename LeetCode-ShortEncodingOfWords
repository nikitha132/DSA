class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end = False
class Solution:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word) -> None:
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]    
        node.is_end = True
    def traverse(self, node=None, prefix="",result=""):
        if node is None:
            node = self.root

        # Recursively traverse children
        for char, child_node in node.children.items():
            result = self.traverse(child_node, prefix + char, result)

        # Check for the end of a branch
        if not node.children:
            result += prefix[::-1] + "#"

        return result
            

    def minimumLengthEncoding(self, words: List[str]) -> int:
        for word in words:
            self.insert(word[::-1])
        
        return len(self.traverse(self.root))
        
        

    
        

        